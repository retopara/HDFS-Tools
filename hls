#!/bin/bash

# Subtree listing from remote HDFS

HDFS_CMD="hdfs dfs"
HDFS_NAME=$(hpwd -p)

# default
LS_CMD=ls;
VERBOSE=0;

function usage () {
    echo "Subtree listing from remote HDFS"
    echo "Usage: $(basename $0) [options] [relative-url-1] [...]"
    echo "       -r recursive directory listing"
    echo "       -v verbose"
    echo "       -h display help"
    exit 2
}

# process flags 
while getopts  "rvh" flag
do
    #echo "$flag" $OPTIND $OPTARG
    ( [ "$flag" == "h" ] || [ "$flag" == ":" ] || [ "$flag" == "?" ] ) && { usage; };
    case "$flag" in
        r)
            LS_CMD=lsr;;
        v)
            VERBOSE=1;;
        -)
            break;;
    esac
done
shift $(( OPTIND-1 )); OPTIND=1

# http://aplawrence.com/Unix/getopts.html
#    If an argument is not given for a flag that needs one, "$flag" gets set to
#    ":" and OPTARG has the misused flag. If an unknown argument is given, a
#    "?" is put in "$flag", and OPTARG again has the unrecognized flag.



# validate prefix
( [ -d $HDFS_PREFIX ] && [ -w $HDFS_PREFIX ] ) || { echo "$(basename $0) > HDFS_PREFIX directory does not exist, or is not writable"; exit 1; }

# remove HDFS_PREFIX from PWD to obtain path into remote HDFS
HDFS_PWD=$(hpwd -r)

[ $VERBOSE -eq 0 ] || { echo "HDFS_PREFIX=$HDFS_PREFIX"; };
[ $VERBOSE -eq 0 ] || { echo "HDFS_PWD=$HDFS_PWD"; };

function processurl () {

    [ $# -gt 0 ] || { echo "$(basename $0) > missing arg to processurl"; exit 1; }
    #
    HDFS_URL=$HDFS_PWD/$1
    HDFS_URL=${HDFS_URL#/}
    HDFS_URL=${HDFS_URL#/}
    [ $VERBOSE -eq 0 ] || { echo "HDFS_URL=$HDFS_URL"; };
    [ $VERBOSE -eq 0 ] || { echo ""; };

    # list file on hdfs
    $HDFS_CMD -$LS_CMD "$HDFS_NAME"/$HDFS_URL
}



# either process current directory, or use commandline args as relative URLs
if [ $# -eq 0 ]; then
    processurl ""
else
    # concatenate 
    set -f
    for i
    do
        processurl $i
    done
    set +f
fi


#
exit;
#



