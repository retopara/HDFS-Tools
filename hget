#!/bin/bash

# Get files or subtree from HDFS

ARGS_0="$@"

HDFS_CMD="hdfs dfs"
HDFS_NAME=$(hpwd -p)

# default
LOCAL_MKDIR=0;
VERBOSE=0;
FORCE=0;

function usage () {
    echo "Get files or subtree from remote HDFS"
    echo "Usage: $(basename $0) [options] [relative-url-1] [...]"
    echo "       -p create local directories"
    echo "       -f overwrite existing url's"
    echo "       -v verbose"
    echo "       -h display help"
    exit 2
}

# process flags 
while getopts  "pfvh" flag
do
    #echo "$flag" $OPTIND $OPTARG
    ( [ "$flag" == "h" ] || [ "$flag" == ":" ] || [ "$flag" == "?" ] ) && { usage; };
    case "$flag" in
        p)
            LOCAL_MKDIR=1;;
        f)
            FORCE=1;;
        v)
            VERBOSE=1;;
        -)
            break;;
    esac
done
shift $(( OPTIND-1 )); OPTIND=1

# http://aplawrence.com/Unix/getopts.html
#    If an argument is not given for a flag that needs one, "$flag" gets set to
#    ":" and OPTARG has the misused flag. If an unknown argument is given, a
#    "?" is put in "$flag", and OPTARG again has the unrecognized flag.


# validate prefix
( [ -d $HDFS_PREFIX ] && [ -w $HDFS_PREFIX ] ) || { echo "$(basename $0) > HDFS_PREFIX directory does not exist, or is not writable"; exit 1; }

# remove HDFS_PREFIX from PWD to obtain path into remote HDFS
HDFS_PWD=$(hpwd -r)

#[ $VERBOSE -eq 0 ] || { echo "$ARGS_0"; };
#[ $VERBOSE -eq 0 ] || { echo "$@"; };
#[ $VERBOSE -eq 0 ] || { echo "$*"; };

[ $VERBOSE -eq 0 ] || { echo "HDFS_PREFIX=$HDFS_PREFIX"; };
[ $VERBOSE -eq 0 ] || { echo "HDFS_PWD=$HDFS_PWD"; };

function processurl () {

    [ $# -gt 0 ] || { echo "$(basename $0) > missing arg to processurl"; exit 1; }
    #
    HDFS_URL="$HDFS_PWD"/"$1"
    HDFS_URL=${HDFS_URL#/}
    HDFS_URL=${HDFS_URL#/}
    LOCAL_URL="$HDFS_PREFIX"/"$HDFS_URL"

	# get (enclosing) directory
	LOCAL_DIR=$(dirname $LOCAL_URL)

    [ $VERBOSE -eq 0 ] || { echo "HDFS_URL=$HDFS_URL"; };
    [ $VERBOSE -eq 0 ] || { echo "LOCAL_URL=$LOCAL_URL"; };
    [ $VERBOSE -eq 0 ] || { echo "LOCAL_DIR=$LOCAL_DIR"; };
    [ $VERBOSE -eq 0 ] || { echo ""; };

    # does url contain glob patterns
    [ -z "$(echo "$HDFS_URL" | sed -nE '/[^\]\*/p')" ] || { echo "$(basename $0) > file globbing not supported"; exit; };
    [ -z "$(echo "$HDFS_URL" | sed -nE '/[^\]\?/p')" ] || { echo "$(basename $0) > file globbing not supported"; exit; };
    [ -z "$(echo "$HDFS_URL" | sed -nE '/(^|[^\])\[.*[^\]\]/p')" ] || { echo "$(basename $0) > file globbing not supported"; exit; };
    [ -z "$(echo "$HDFS_URL" | sed -nE '/(^|[^\])\{.*[^\]\}/p')" ] || { echo "$(basename $0) > file globbing not supported"; exit; };

    # if local file exists, and force specified, erase it
    [ -e $LOCAL_URL ] && [ $FORCE -eq 1 ] && { /bin/rm -r $LOCAL_URL; LOCAL_MKDIR=1; };
    [ -e $LOCAL_URL ] && { echo "$(basename $0) > Local path already exists $LOCAL_URL"; exit; };

    # ensure local directory exists
    [ $LOCAL_MKDIR -eq 0 ] || { /bin/mkdir -p $LOCAL_DIR; };
    [ -d $LOCAL_DIR ] || { echo "$(basename $0) > Missing local directory $LOCAL_DIR"; exit; };
    [ -w $LOCAL_DIR ] || { echo "$(basename $0) > Local directory $LOCAL_DIR not writable"; exit; };

    # get file 
    $HDFS_CMD -get "$HDFS_NAME"/"$HDFS_URL" "$LOCAL_DIR"
}


# either process current directory, or use commandline args as relative URLs
if [ $# -eq 0 ]; then
    processurl "";
else
    # concatenate 
    set -f
    for i
    do
        processurl $i;
    done
    set +f
fi


#
exit;
#

